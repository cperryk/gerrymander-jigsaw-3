{"version":3,"sources":["PuzzlePiece.tsx","PuzzleGuide.tsx","Puzzle.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PuzzlePiece","props","ref","state","translate","dragColor","hoverColor","color","dragging","lastPosition","transform","React","createRef","pathEls","this","paths","map","path","index","d","stroke","strokeWidth","fill","key","strokeLinecap","strokeMiterlimit","cursor","solved","scale","dragScale","onStart","handleDragStart","bind","onStop","handleDragStop","disabled","defaultPosition","x","y","onMouseOver","handleMouseOver","onMouseOut","handleMouseOut","current","getBoundingClientRect","setState","setAttribute","onDragStart","e","data","onDragStop","PureComponent","PuzzleGuide","Component","Puzzle","resizeHandler","colorScale","chroma","domain","pieces","length","piece","guideRef","pieceRef","tolerance","handleDrag","guides","bboxGuide","devMode","viewBox","width","height","className","window","innerWidth","innerHeight","join","refreshDragScale","handleResize","addEventListener","removeEventListener","forceUpdate","svgBbox","pixelsPerCoord","slice","movePieceToFront","pieceBbox","getBbox","guideBbox","solutionBounds","left","top","every","isPieceSolved","isAllSolved","alert","logPositions","positions","reduce","prev","curr","position","getPosition","toFixed","console","log","JSON","stringify","App","Object","entries","districts","transforms","parseFloat","minX","minY","document","preventDefault","stopPropagation","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sWAEaA,EAAb,YAoBE,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAFDC,SACY,EAEjB,EAAKC,MAAQ,CACXC,UAAW,CAAC,GAAI,GAChBC,UAAW,SACXC,WAAY,yBACZC,MAAO,EAAKN,MAAMM,MAClBC,UAAU,EACVC,aAAc,EAAKR,MAAMS,WAE3B,EAAKR,IAAMS,IAAMC,YAVA,EApBrB,sEAgCY,IAAD,OACDC,EAAUC,KAAKb,MAAMc,MAAMC,KAAI,SAACC,EAAMC,GAC1C,OACE,0BACEC,EAAGF,EACHG,OAAO,QACPC,YAAa,EACbC,KAAM,EAAKnB,MAAMI,MACjBgB,IAAKL,EACLM,cAAc,SACdC,iBAAkB,EAClBC,OAAQ,EAAKzB,MAAM0B,OAAS,SAAW,YAI7C,OACE,kBAAC,IAAD,CACEC,MAAOd,KAAKb,MAAM4B,UAClBC,QAAShB,KAAKiB,gBAAgBC,KAAKlB,MACnCmB,OAAQnB,KAAKoB,eAAeF,KAAKlB,MACjCqB,SAAUrB,KAAKb,MAAM0B,OACrBS,gBAAiB,CACfC,EAAGvB,KAAKb,MAAMS,UAAU,GACxB4B,EAAGxB,KAAKb,MAAMS,UAAU,KAG1B,uBACE6B,YAAazB,KAAK0B,gBAAgBR,KAAKlB,MACvC2B,WAAY3B,KAAK4B,eAAeV,KAAKlB,MACrCZ,IAAKY,KAAKZ,KAETW,MA/DX,gCAqEI,IAAMX,EAAMY,KAAKZ,IACjB,GAAmB,kBAARA,GAAoBA,GAAOA,EAAIyC,QACxC,OAAOzC,EAAIyC,QAAQC,0BAvEzB,wCA2EQ9B,KAAKb,MAAM0B,QAAUb,KAAKX,MAAMK,UACpCM,KAAK+B,SAAS,CACZtC,MAAOO,KAAKX,MAAMG,eA7ExB,uCAiFQQ,KAAKb,MAAM0B,QAAUb,KAAKX,MAAMK,UACpCM,KAAK+B,SAAS,CACZtC,MAAOO,KAAKb,MAAMM,UAnFxB,2CAuFQO,KAAKb,MAAM0B,QAA8B,kBAAbb,KAAKZ,KACnCY,KAAKZ,IAAIyC,QAAQG,aAAa,YAAa,MAxFjD,wCA4FIhC,KAAK+B,SAAS,CACZrC,UAAU,EACVD,MAAOO,KAAKX,MAAME,YAEpBS,KAAKb,MAAM8C,gBAhGf,qCAkGiBC,EAAeC,GAC5BnC,KAAK+B,SAAS,CACZrC,UAAU,EACVD,MAAOO,KAAKb,MAAMM,MAClBE,aAAc,CAACwC,EAAKZ,EAAGY,EAAKX,KAE9BxB,KAAKb,MAAMiD,eAxGf,oCA2GI,OAAOpC,KAAKX,MAAMM,iBA3GtB,GAAiCE,IAAMwC,eCD1BC,EAAb,YAIE,WAAYnD,GAAQ,IAAD,8BACjB,4CAAMA,KAFDC,SACY,EAEjB,EAAKA,IAAMS,IAAMC,YAFA,EAJrB,sEASI,IAAMC,EAAUC,KAAKb,MAAMc,MAAMC,KAAI,SAACC,EAAMC,GAC1C,OACE,0BACEC,EAAGF,EACHG,OAAO,qBACPC,YAAa,GACbC,KAAK,UACLC,IAAKL,OAIX,OAAO,uBAAGhB,IAAKY,KAAKZ,KAAMW,KApB9B,gCAuBI,IAAMX,EAAMY,KAAKZ,IACjB,GAAmB,kBAARA,GAAoBA,GAAOA,EAAIyC,QACxC,OAAOzC,EAAIyC,QAAQC,4BAzBzB,GAAiCjC,IAAM0C,WCK1BC,EAAb,YAsBE,WAAYrD,GAAQ,IAAD,uBACjB,4CAAMA,KAHAC,SAEW,IADXqD,mBACW,EAEjB,IAAMC,EAAaC,IAChB7B,MAAM,YACN8B,OAAO,CAAC,EAAGzD,EAAM0D,OAAOC,QAAS3D,EAAM0D,OAAOC,QAJhC,OAKjB,EAAKzD,MAAQ,CACXwD,OAAQ1D,EAAM0D,OAAO3C,KAAI,SAAC6C,EAAO3C,GAAR,MAAmB,CAC1CK,IAAKsC,EAAMtC,IACXR,MAAO8C,EAAM9C,MACbL,UAAWmD,EAAMnD,UACjBH,MAAOiD,EAAWtC,GAClB4C,SAAUnD,IAAMC,YAChBmD,SAAUpD,IAAMC,gBAElBe,QAAQ,EACRE,UAAW,EACXmC,UAAW,IAEb,EAAK9D,IAAMS,IAAMC,YAlBA,EAtBrB,sEA0CY,IAAD,OACD+C,EAAS7C,KAAKX,MAAMwD,OAAO3C,KAAI,SAAC6C,EAAO3C,GAAR,OACnC,kBAAC,EAAD,CACEH,MAAO8C,EAAM9C,MACbQ,IAAKsC,EAAMtC,IACXhB,MAAOsD,EAAMtD,MACbwC,YAAa,kBAAM,EAAKkB,WAAW/C,IACnCgC,WAAY,kBAAM,EAAKhB,kBACvBP,OAAQ,EAAKxB,MAAMwB,OACnBE,UAAW,EAAK1B,MAAM0B,UACtB3B,IAAK2D,EAAME,SACXrD,UAAWmD,EAAMnD,eAGfwD,EAASpD,KAAKX,MAAMwD,OAAO3C,KAAI,SAAC6C,EAAO3C,GAAR,OACnC,kBAAC,EAAD,CAAaH,MAAO8C,EAAM9C,MAAOb,IAAK2D,EAAMC,SAAUvC,IAAKL,OAEvDiD,EAAYrD,KAAKb,MAAMmE,QAC3B,0BACE/B,EAAGvB,KAAKb,MAAMoE,QAAQ,GACtB/B,EAAGxB,KAAKb,MAAMoE,QAAQ,GACtBC,MAAOxD,KAAKb,MAAMoE,QAAQ,GAC1BE,OAAQzD,KAAKb,MAAMoE,QAAQ,KAE3B,KACJ,OACE,yBAAKG,UAAU,UACb,yBACEF,MAAOG,OAAOC,WACdH,OAAQE,OAAOE,YACfN,QAASvD,KAAKb,MAAMoE,QAAQO,KAAK,KACjC1E,IAAKY,KAAKZ,KAETiE,EACAD,EACAP,MA7EX,0CAmFI7C,KAAK+D,mBACL/D,KAAKyC,cAAgBzC,KAAKgE,aAAa9C,KAAKlB,MAC5C2D,OAAOM,iBAAiB,SAAUjE,KAAKyC,iBArF3C,6CAwFIkB,OAAOO,oBAAoB,SAAUlE,KAAKyC,iBAxF9C,qCA2FIzC,KAAKmE,cACLnE,KAAK+D,qBA5FT,yCA+FI,GAAwB,kBAAb/D,KAAKZ,IAAhB,CADiB,IAETmE,EAAYvD,KAAKb,MAAjBoE,QACFa,EAAUpE,KAAKZ,IAAIyC,QAAQC,wBAI3BuC,EAHsBD,EAAQZ,MAAQY,EAAQX,OACzBF,EAAQ,GAAKA,EAAQ,GAG5Ca,EAAQX,OAASzD,KAAKb,MAAMoE,QAAQ,GACpCa,EAAQZ,MAAQxD,KAAKb,MAAMoE,QAAQ,GACvCvD,KAAK+B,SAAS,CACZhB,UAAWsD,OAzGjB,uCA4GmBjE,GACXA,IAAUJ,KAAKX,MAAMwD,OAAOC,OAAS,GACzC9C,KAAK+B,SAAS,CACZc,OAAO,GAAD,mBACD7C,KAAKX,MAAMwD,OAAOyB,MAAM,EAAGlE,IAD1B,YAEDJ,KAAKX,MAAMwD,OAAOyB,MAAMlE,EAAQ,EAAGJ,KAAKX,MAAMwD,OAAOC,SAFpD,CAGJ9C,KAAKX,MAAMwD,OAAOzC,SAlH1B,iCAsHaA,GACTJ,KAAKuE,iBAAiBnE,KAvH1B,oCAyHgBA,GAAyB,IAAD,EACLJ,KAAKX,MAAMwD,OAAOzC,GAAzC4C,EAD4B,EAC5BA,SAAUC,EADkB,EAClBA,SACVC,EAAclD,KAAKX,MAAnB6D,UACR,GAA0B,kBAAbD,GAA6C,kBAAbD,EAC3C,OAAO,EAET,IAAMwB,EAAYvB,EAASpB,QAAQ4C,UAC7BC,EAAY1B,EAASnB,QAAQ4C,UAC7BE,EACAD,EAAUE,KAAO1B,EADjByB,EAEAD,EAAUE,KAAO1B,EAFjByB,EAGAD,EAAUG,IAAM3B,EAHhByB,EAIAD,EAAUG,IAAM3B,EAER3B,EAAciD,EAApBI,KAAcpD,EAAMgD,EAAXK,IAMjB,OAJEtD,EAAIoD,GACJpD,EAAIoD,GACJnD,EAAImD,GACJnD,EAAImD,IA5IV,oCA+IiB,IAAD,OACZ,OAAO3E,KAAKX,MAAMwD,OAAOiC,OAAM,SAAC/B,EAAO3C,GAAR,OAAkB,EAAK2E,cAAc3E,QAhJxE,uCAmJQJ,KAAKgF,gBACPhF,KAAK+B,SAAS,CACZlB,QAAQ,IAEV8C,OAAOsB,MAAM,YAEfjF,KAAKkF,iBAzJT,qCA6JI,GAAKlF,KAAKb,MAAMmE,QAAhB,CACA,IAAM6B,EAAYnF,KAAKX,MAAMwD,OAAOuC,QAAO,SAACC,EAAMC,GAAU,IAClDrC,EAAaqC,EAAbrC,SACR,GACsB,kBAAbA,GACyB,kBAAzBA,EAASpB,QAAQzC,IACxB,CACA,IAAMmG,EAAWtC,EAASpB,QAAQ2D,cAClC,GAAID,EAAU,CAAC,IAAD,cACGA,EADH,GACLhE,EADK,KACFC,EADE,KAEZ6D,EAAKC,EAAK7E,KAAO,CAACc,EAAEkE,QAAQ,GAAIjE,EAAEiE,QAAQ,KAG9C,OAAOJ,IACN,IACHK,QAAQC,IAAIC,KAAKC,UAAUV,SA5K/B,GAA4BtF,IAAM0C,W,IC2CnBuD,E,YA1Bb,WAAY3G,GAAQ,IAAD,8BACjB,4CAAMA,KACDE,MAAQ,CACXwD,OAnBGkD,OAAOC,QAAQC,EAAUhG,OAAOC,KAAI,YAAmB,IAAD,mBAAhBO,EAAgB,KAAXR,EAAW,OAC5CgG,EAAUC,WAAWzF,IAAQ,CAAC,IAAK,KADS,mBACpDc,EADoD,KACjDC,EADiD,KAE3D,MAAO,CACLf,MACAR,QACAL,UAAW,CAACuG,WAAW5E,GAAI4E,WAAW3E,SAWvB,E,sEAOjB,IAAM+B,EAAU0C,EAAU1C,QAC1B,OACE,yBAAKG,UAAU,OACb,kBAAC,EAAD,CACEb,OAAQ7C,KAAKX,MAAMwD,OACnBU,QAAS,CAACA,EAAQ6C,KAAM7C,EAAQ8C,KAAM9C,EAAQC,MAAOD,EAAQE,QAC7DH,SAAS,O,0CAMfgD,SAASrC,iBAAiB,cAAc,SAAA/B,GACtCA,EAAEqE,iBACFrE,EAAEsE,yB,GA3BU3G,IAAM0C,WCLJkE,QACW,cAA7B9C,OAAO+C,SAASC,UAEe,UAA7BhD,OAAO+C,SAASC,UAEhBhD,OAAO+C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASR,SAASS,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.45202a52.chunk.js","sourcesContent":["import React, { Ref } from \"react\";\nimport Draggable, { DraggableData } from \"react-draggable\";\nexport class PuzzlePiece extends React.PureComponent<\n  {\n    paths: string[];\n    onDragStart: () => any;\n    onDragStop: () => any;\n    color: string;\n    solved: boolean;\n    dragScale: number;\n    transform: [number, number];\n  },\n  {\n    translate: [number, number];\n    color: string;\n    hoverColor: string;\n    dragColor: string;\n    dragging: boolean;\n    lastPosition?: [number, number];\n  }\n> {\n  public ref: Ref<SVGGElement>;\n  constructor(props) {\n    super(props);\n    this.state = {\n      translate: [50, 0],\n      dragColor: \"yellow\",\n      hoverColor: \"rgb(100%, 100%, 44.1%)\",\n      color: this.props.color,\n      dragging: false,\n      lastPosition: this.props.transform\n    };\n    this.ref = React.createRef();\n  }\n  render() {\n    const pathEls = this.props.paths.map((path, index) => {\n      return (\n        <path\n          d={path}\n          stroke=\"black\"\n          strokeWidth={1}\n          fill={this.state.color}\n          key={index}\n          strokeLinecap=\"square\"\n          strokeMiterlimit={4}\n          cursor={this.props.solved ? \"normal\" : \"move\"}\n        />\n      );\n    });\n    return (\n      <Draggable\n        scale={this.props.dragScale}\n        onStart={this.handleDragStart.bind(this)}\n        onStop={this.handleDragStop.bind(this)}\n        disabled={this.props.solved}\n        defaultPosition={{\n          x: this.props.transform[0],\n          y: this.props.transform[1]\n        }}\n      >\n        <g\n          onMouseOver={this.handleMouseOver.bind(this)}\n          onMouseOut={this.handleMouseOut.bind(this)}\n          ref={this.ref}\n        >\n          {pathEls}\n        </g>\n      </Draggable>\n    );\n  }\n  getBbox(): ClientRect | null {\n    const ref = this.ref;\n    if (typeof ref === \"object\" && ref && ref.current) {\n      return ref.current.getBoundingClientRect();\n    }\n  }\n  handleMouseOver() {\n    if (this.props.solved || this.state.dragging) return;\n    this.setState({\n      color: this.state.hoverColor\n    });\n  }\n  handleMouseOut() {\n    if (this.props.solved || this.state.dragging) return;\n    this.setState({\n      color: this.props.color\n    });\n  }\n  componentDidUpdate() {\n    if (this.props.solved && typeof this.ref === \"object\") {\n      this.ref.current.setAttribute(\"transform\", \"\");\n    }\n  }\n  handleDragStart() {\n    this.setState({\n      dragging: true,\n      color: this.state.dragColor\n    });\n    this.props.onDragStart();\n  }\n  handleDragStop(e: MouseEvent, data: DraggableData) {\n    this.setState({\n      dragging: false,\n      color: this.props.color,\n      lastPosition: [data.x, data.y]\n    });\n    this.props.onDragStop();\n  }\n  getPosition(): [number, number] | null {\n    return this.state.lastPosition;\n  }\n}\n","import React, { Ref } from \"react\";\nexport class PuzzleGuide extends React.Component<{\n  paths: string[];\n}> {\n  public ref: Ref<SVGGElement>;\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n  }\n  render() {\n    const pathEls = this.props.paths.map((path, index) => {\n      return (\n        <path\n          d={path}\n          stroke=\"{this.props.color}\"\n          strokeWidth={0.5}\n          fill=\"#e3e3e3\"\n          key={index}\n        />\n      );\n    });\n    return <g ref={this.ref}>{pathEls}</g>;\n  }\n  getBbox(): ClientRect | null {\n    const ref = this.ref;\n    if (typeof ref === \"object\" && ref && ref.current) {\n      return ref.current.getBoundingClientRect();\n    }\n  }\n}\n","import React, { Ref } from \"react\";\nimport chroma from \"chroma-js\";\nimport { PuzzlePiece } from \"./PuzzlePiece\";\nimport { PuzzleGuide } from \"./PuzzleGuide\";\nimport { Piece } from \"./types\";\n\nexport class Puzzle extends React.Component<\n  {\n    pieces: Piece[];\n    viewBox: [number, number, number, number];\n    devMode?: boolean;\n  },\n  {\n    pieces: {\n      key: string;\n      paths: string[];\n      color: string;\n      transform: [number, number];\n      guideRef: Ref<PuzzleGuide>;\n      pieceRef: Ref<PuzzlePiece>;\n    }[];\n    solved: boolean;\n    dragScale: number; // number of pixels per svg unit\n    tolerance: number;\n  }\n> {\n  private ref: Ref<SVGSVGElement>;\n  private resizeHandler?: (...args: any[]) => any;\n  constructor(props) {\n    super(props);\n    const colorScale = chroma\n      .scale(\"Spectral\")\n      .domain([0, props.pieces.length], props.pieces.length);\n    this.state = {\n      pieces: props.pieces.map((piece, index) => ({\n        key: piece.key,\n        paths: piece.paths,\n        transform: piece.transform,\n        color: colorScale(index),\n        guideRef: React.createRef(),\n        pieceRef: React.createRef()\n      })),\n      solved: false,\n      dragScale: 1,\n      tolerance: 30\n    };\n    this.ref = React.createRef();\n  }\n  render() {\n    const pieces = this.state.pieces.map((piece, index) => (\n      <PuzzlePiece\n        paths={piece.paths}\n        key={piece.key}\n        color={piece.color}\n        onDragStart={() => this.handleDrag(index)}\n        onDragStop={() => this.handleDragStop()}\n        solved={this.state.solved}\n        dragScale={this.state.dragScale}\n        ref={piece.pieceRef}\n        transform={piece.transform}\n      />\n    ));\n    const guides = this.state.pieces.map((piece, index) => (\n      <PuzzleGuide paths={piece.paths} ref={piece.guideRef} key={index} />\n    ));\n    const bboxGuide = this.props.devMode ? (\n      <rect\n        x={this.props.viewBox[0]}\n        y={this.props.viewBox[1]}\n        width={this.props.viewBox[2]}\n        height={this.props.viewBox[3]}\n      ></rect>\n    ) : null;\n    return (\n      <div className=\"Puzzle\">\n        <svg\n          width={window.innerWidth}\n          height={window.innerHeight}\n          viewBox={this.props.viewBox.join(\" \")}\n          ref={this.ref}\n        >\n          {bboxGuide}\n          {guides}\n          {pieces}\n        </svg>\n      </div>\n    );\n  }\n  componentDidMount() {\n    this.refreshDragScale();\n    this.resizeHandler = this.handleResize.bind(this);\n    window.addEventListener(\"resize\", this.resizeHandler);\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.resizeHandler);\n  }\n  handleResize() {\n    this.forceUpdate(); // re-render first b/c to compute drag scale we need to render new dimensions\n    this.refreshDragScale();\n  }\n  refreshDragScale() {\n    if (typeof this.ref !== \"object\") return;\n    const { viewBox } = this.props;\n    const svgBbox = this.ref.current.getBoundingClientRect();\n    const viewPortAspectRatio = svgBbox.width / svgBbox.height;\n    const viewBoxAspectRatio = viewBox[2] / viewBox[3];\n    const heightLimited = viewPortAspectRatio > viewBoxAspectRatio;\n    const pixelsPerCoord = heightLimited\n      ? svgBbox.height / this.props.viewBox[3]\n      : svgBbox.width / this.props.viewBox[2];\n    this.setState({\n      dragScale: pixelsPerCoord\n    });\n  }\n  movePieceToFront(index: number) {\n    if (index === this.state.pieces.length - 1) return;\n    this.setState({\n      pieces: [\n        ...this.state.pieces.slice(0, index),\n        ...this.state.pieces.slice(index + 1, this.state.pieces.length),\n        this.state.pieces[index]\n      ]\n    });\n  }\n  handleDrag(index: number) {\n    this.movePieceToFront(index);\n  }\n  isPieceSolved(index: number): boolean {\n    const { guideRef, pieceRef } = this.state.pieces[index];\n    const { tolerance } = this.state;\n    if (!(typeof pieceRef === \"object\" && typeof guideRef === \"object\")) {\n      return false;\n    }\n    const pieceBbox = pieceRef.current.getBbox();\n    const guideBbox = guideRef.current.getBbox();\n    const solutionBounds = {\n      x1: guideBbox.left - tolerance,\n      x2: guideBbox.left + tolerance,\n      y1: guideBbox.top - tolerance,\n      y2: guideBbox.top + tolerance\n    };\n    const { left: x, top: y } = pieceBbox;\n    const out =\n      x > solutionBounds.x1 &&\n      x < solutionBounds.x2 &&\n      y > solutionBounds.y1 &&\n      y < solutionBounds.y2;\n    return out;\n  }\n  isAllSolved() {\n    return this.state.pieces.every((piece, index) => this.isPieceSolved(index));\n  }\n  handleDragStop() {\n    if (this.isAllSolved()) {\n      this.setState({\n        solved: true\n      });\n      window.alert(\"solved!\");\n    }\n    this.logPositions();\n  }\n  // for development\n  logPositions() {\n    if (!this.props.devMode) return;\n    const positions = this.state.pieces.reduce((prev, curr) => {\n      const { pieceRef } = curr;\n      if (\n        typeof pieceRef === \"object\" &&\n        typeof pieceRef.current.ref === \"object\"\n      ) {\n        const position = pieceRef.current.getPosition();\n        if (position) {\n          const [x, y] = position;\n          prev[curr.key] = [x.toFixed(1), y.toFixed(1)];\n        }\n      }\n      return prev;\n    }, {});\n    console.log(JSON.stringify(positions));\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport districts from \"../src/districts/la.json\";\nimport { Puzzle } from \"./Puzzle\";\nimport { Piece } from \"./types\";\n\nfunction getPieces(): Piece[] {\n  return Object.entries(districts.paths).map(([key, paths]) => {\n    const [x, y] = districts.transforms[key] || [\"0\", \"0\"];\n    return {\n      key,\n      paths,\n      transform: [parseFloat(x), parseFloat(y)]\n    };\n  });\n}\n\nclass App extends React.Component<\n  {},\n  {\n    pieces: Piece[];\n  }\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pieces: getPieces()\n    };\n  }\n  render() {\n    const viewBox = districts.viewBox;\n    return (\n      <div className=\"App\">\n        <Puzzle\n          pieces={this.state.pieces}\n          viewBox={[viewBox.minX, viewBox.minY, viewBox.width, viewBox.height]}\n          devMode={false}\n        />\n      </div>\n    );\n  }\n  componentDidMount() {\n    document.addEventListener(\"touchstart\", e => {\n      e.preventDefault();\n      e.stopPropagation();\n    });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["PuzzleGuide.tsx","PuzzlePiece.tsx","Puzzle.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PuzzleGuide","props","ref","React","createRef","pathEls","this","paths","map","path","index","d","stroke","strokeWidth","fill","key","current","getBoundingClientRect","Component","PuzzlePiece","guideRef","state","translate","dragColor","hoverColor","color","dragging","strokeLinecap","strokeMiterlimit","cursor","solved","scale","dragScale","onStart","handleDragStart","bind","onStop","handleDragStop","disabled","onMouseOver","handleMouseOver","onMouseOut","handleMouseOut","setAttribute","setState","onDragStart","onDragStop","isSolved","pieceBbox","getBbox","guideBbox","solutionBounds","x1","left","tolerance","x2","y1","top","y2","x","y","console","log","out","PureComponent","Puzzle","solutions","resizeHandler","colorScale","chroma","domain","pathSets","length","pieces","hex","reduce","prev","curr","piece","handleDrag","className","width","height","viewBox","concat","refreshDragScale","window","addEventListener","removeEventListener","Math","min","slice","movePieceToFront","isAllSolved","alert","Object","values","every","val","App","districts","entries","district","document","e","preventDefault","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.36593107.chunk.js","sourcesContent":["import React, { Ref } from \"react\";\nexport class PuzzleGuide extends React.Component<{\n  paths: string[];\n}> {\n  public ref: Ref<SVGGElement>;\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n  }\n  render() {\n    const pathEls = this.props.paths.map((path, index) => {\n      return (\n        <path\n          d={path}\n          stroke=\"{this.props.color}\"\n          strokeWidth={0.5}\n          fill=\"#e3e3e3\"\n          key={index}\n        />\n      );\n    });\n    return <g ref={this.ref}>{pathEls}</g>;\n  }\n  getBbox(): ClientRect | null {\n    const ref = this.ref;\n    if (typeof ref === \"object\" && ref && ref.current) {\n      return ref.current.getBoundingClientRect();\n    }\n  }\n}\n","import React, { Ref } from \"react\";\nimport Draggable from \"react-draggable\";\nimport { PuzzleGuide } from \"./PuzzleGuide\";\nexport class PuzzlePiece extends React.PureComponent<\n  {\n    paths: string[];\n    onDragStart: () => any;\n    onDragStop: (isSolved: boolean) => any;\n    color: string;\n    tolerance: number;\n    solved: boolean;\n    dragScale: number;\n  },\n  {\n    translate: [number, number];\n    color: string;\n    hoverColor: string;\n    dragColor: string;\n    dragging: boolean;\n  }\n> {\n  private ref: Ref<SVGGElement>;\n  private guideRef: Ref<PuzzleGuide>;\n  constructor(props) {\n    super(props);\n    this.state = {\n      translate: [50, 0],\n      dragColor: \"yellow\",\n      hoverColor: \"rgb(100%, 100%, 44.1%)\",\n      color: this.props.color,\n      dragging: false\n    };\n    this.ref = React.createRef();\n    this.guideRef = React.createRef();\n  }\n  render() {\n    const pathEls = this.props.paths.map((path, index) => {\n      return (\n        <path\n          d={path}\n          stroke=\"gray\"\n          strokeWidth={0.2}\n          fill={this.state.color}\n          key={index}\n          strokeLinecap=\"square\"\n          strokeMiterlimit={4}\n          cursor={this.props.solved ? \"normal\" : \"move\"}\n        />\n      );\n    });\n    return (\n      <g>\n        <PuzzleGuide paths={this.props.paths} ref={this.guideRef} />\n        <Draggable\n          scale={this.props.dragScale}\n          onStart={this.handleDragStart.bind(this)}\n          onStop={this.handleDragStop.bind(this)}\n          disabled={this.props.solved}\n        >\n          <g\n            onMouseOver={this.handleMouseOver.bind(this)}\n            onMouseOut={this.handleMouseOut.bind(this)}\n            ref={this.ref}\n          >\n            {pathEls}\n          </g>\n        </Draggable>\n      </g>\n    );\n  }\n  getBbox(): ClientRect | null {\n    const ref = this.ref;\n    if (typeof ref === \"object\" && ref && ref.current) {\n      return ref.current.getBoundingClientRect();\n    }\n  }\n  componentDidUpdate() {\n    if (this.props.solved && typeof this.ref === \"object\") {\n      this.ref.current.setAttribute(\"transform\", \"\");\n    }\n  }\n  handleMouseOver() {\n    if (this.props.solved || this.state.dragging) return;\n    this.setState({\n      color: this.state.hoverColor\n    });\n  }\n  handleMouseOut() {\n    if (this.props.solved || this.state.dragging) return;\n    this.setState({\n      color: this.props.color\n    });\n  }\n  handleDragStart() {\n    this.setState({\n      dragging: true,\n      color: this.state.dragColor\n    });\n    this.props.onDragStart();\n  }\n  handleDragStop() {\n    this.setState({\n      dragging: false,\n      color: this.props.color\n    });\n    this.props.onDragStop(this.isSolved());\n  }\n  isSolved(): boolean {\n    if (typeof this.guideRef !== \"object\") return false;\n    const pieceBbox = this.getBbox();\n    const guideBbox = this.guideRef.current.getBbox();\n    const solutionBounds = {\n      x1: guideBbox.left - this.props.tolerance,\n      x2: guideBbox.left + this.props.tolerance,\n      y1: guideBbox.top - this.props.tolerance,\n      y2: guideBbox.top + this.props.tolerance\n    };\n    const { left: x, top: y } = pieceBbox;\n    console.log(guideBbox, pieceBbox, solutionBounds);\n    const out =\n      x > solutionBounds.x1 &&\n      x < solutionBounds.x2 &&\n      y > solutionBounds.y1 &&\n      y < solutionBounds.y2;\n    console.log(out);\n    return out;\n  }\n}\n","import React, { Ref } from \"react\";\nimport chroma from \"chroma-js\";\nimport { PuzzlePiece } from \"./PuzzlePiece\";\nimport { PuzzleGuide } from \"./PuzzleGuide\";\nexport class Puzzle extends React.Component<\n  {\n    pathSets: string[][];\n  },\n  {\n    pieces: {\n      key: string;\n      paths: string[];\n      color: string;\n    }[];\n    solved: boolean;\n    dragScale: number; // number of pixels per svg unit\n  }\n> {\n  solutions: {\n    [key: string]: boolean;\n  } = {};\n  private ref: Ref<SVGSVGElement>;\n  private resizeHandler?: (...args: any[]) => any;\n  constructor(props) {\n    super(props);\n    const colorScale = chroma\n      .scale(\"RdYlBu\")\n      .domain([0, props.pathSets.length], props.pathSets.length, \"quantiles\");\n    this.state = {\n      pieces: props.pathSets.map((paths, index) => ({\n        key: index,\n        paths,\n        color: colorScale(index / paths.length).hex()\n      })),\n      solved: false,\n      dragScale: 1\n    };\n    this.solutions = this.props.pathSets.reduce((prev, curr, index) => {\n      prev[index] = false;\n      return prev;\n    }, {});\n    this.ref = React.createRef();\n  }\n  render() {\n    const pieces = this.state.pieces.map((piece, index) => (\n      <PuzzlePiece\n        paths={piece.paths}\n        key={piece.key}\n        color={piece.color}\n        tolerance={30}\n        onDragStart={() => this.handleDrag(index)}\n        onDragStop={isSolved => this.handleDragStop(piece.key, isSolved)}\n        solved={this.state.solved}\n        dragScale={this.state.dragScale}\n      />\n    ));\n    return (\n      <div className=\"Puzzle\">\n        <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 1000 1000\" ref={this.ref}>\n          <PuzzleGuide\n            paths={[].concat(this.state.pieces.map(piece => piece.paths))}\n          />\n          {pieces}\n        </svg>\n      </div>\n    );\n  }\n  componentDidMount() {\n    this.refreshDragScale();\n    this.resizeHandler = this.refreshDragScale.bind(this);\n    window.addEventListener(\"resize\", this.resizeHandler);\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.resizeHandler);\n  }\n  refreshDragScale() {\n    if (typeof this.ref === \"object\") {\n      const { width, height } = this.ref.current.getBoundingClientRect();\n      this.setState({\n        dragScale: Math.min(width, height) / 1000\n      });\n    }\n  }\n  movePieceToFront(index: number) {\n    if (index === this.state.pieces.length - 1) return;\n    this.setState({\n      pieces: [\n        ...this.state.pieces.slice(0, index),\n        ...this.state.pieces.slice(index + 1, this.state.pieces.length),\n        this.state.pieces[index]\n      ]\n    });\n  }\n  handleDrag(index: number) {\n    this.movePieceToFront(index);\n  }\n  handleDragStop(key: string, isSolved: boolean) {\n    this.solutions[key] = isSolved;\n    console.log(this.solutions);\n    if (this.isAllSolved()) {\n      window.alert(\"solved!\");\n      this.setState({\n        solved: true\n      });\n    }\n  }\n  isAllSolved(): boolean {\n    return Object.values(this.solutions).every(val => val === true);\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport districts from \"../src/districts/al.json\";\nimport { Puzzle } from \"./Puzzle\";\n\nfunction getDistricts(): DistrictData[] {\n  return Object.entries(districts).map(([key, paths]) => ({ key, paths }));\n}\n\ntype DistrictData = { paths: string[]; key: string };\n\nclass App extends React.Component<\n  {},\n  {\n    districts: DistrictData[];\n  }\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      districts: getDistricts()\n    };\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Puzzle\n          pathSets={this.state.districts.map(district => district.paths)}\n        />\n      </div>\n    );\n  }\n  componentDidMount() {\n    document.addEventListener(\"touchstart\", e => e.preventDefault());\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["PuzzlePiece.tsx","PuzzleGuide.tsx","Puzzle.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PuzzlePiece","props","ref","state","translate","dragColor","hoverColor","color","dragging","React","createRef","pathEls","this","paths","map","path","index","d","stroke","strokeWidth","fill","key","strokeLinecap","strokeMiterlimit","cursor","solved","scale","dragScale","onStart","handleDragStart","bind","onStop","handleDragStop","disabled","onMouseOver","handleMouseOver","onMouseOut","handleMouseOut","current","getBoundingClientRect","setAttribute","setState","onDragStart","onDragStop","PureComponent","PuzzleGuide","Component","Puzzle","guideRefs","pieceRefs","resizeHandler","colorScale","chroma","domain","pathSets","length","pieces","hex","tolerance","piece","handleDrag","guides","className","width","height","viewBox","refreshDragScale","window","addEventListener","removeEventListener","Math","min","slice","movePieceToFront","guideRef","pieceRef","pieceBbox","getBbox","guideBbox","solutionBounds","left","top","x","y","every","isPieceSolved","isAllSolved","alert","App","districts","Object","entries","district","document","e","preventDefault","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a249faf1.chunk.js","sourcesContent":["import React, { Ref } from \"react\";\nimport Draggable from \"react-draggable\";\nexport class PuzzlePiece extends React.PureComponent<\n  {\n    paths: string[];\n    onDragStart: () => any;\n    onDragStop: () => any;\n    color: string;\n    solved: boolean;\n    dragScale: number;\n  },\n  {\n    translate: [number, number];\n    color: string;\n    hoverColor: string;\n    dragColor: string;\n    dragging: boolean;\n  }\n> {\n  private ref: Ref<SVGGElement>;\n  constructor(props) {\n    super(props);\n    this.state = {\n      translate: [50, 0],\n      dragColor: \"yellow\",\n      hoverColor: \"rgb(100%, 100%, 44.1%)\",\n      color: this.props.color,\n      dragging: false\n    };\n    this.ref = React.createRef();\n  }\n  render() {\n    const pathEls = this.props.paths.map((path, index) => {\n      return (\n        <path\n          d={path}\n          stroke=\"gray\"\n          strokeWidth={0.2}\n          fill={this.state.color}\n          key={index}\n          strokeLinecap=\"square\"\n          strokeMiterlimit={4}\n          cursor={this.props.solved ? \"normal\" : \"move\"}\n        />\n      );\n    });\n    return (\n      <Draggable\n        scale={this.props.dragScale}\n        onStart={this.handleDragStart.bind(this)}\n        onStop={this.handleDragStop.bind(this)}\n        disabled={this.props.solved}\n      >\n        <g\n          onMouseOver={this.handleMouseOver.bind(this)}\n          onMouseOut={this.handleMouseOut.bind(this)}\n          ref={this.ref}\n        >\n          {pathEls}\n        </g>\n      </Draggable>\n    );\n  }\n  getBbox(): ClientRect | null {\n    const ref = this.ref;\n    if (typeof ref === \"object\" && ref && ref.current) {\n      return ref.current.getBoundingClientRect();\n    }\n  }\n  componentDidUpdate() {\n    if (this.props.solved && typeof this.ref === \"object\") {\n      this.ref.current.setAttribute(\"transform\", \"\");\n    }\n  }\n  handleMouseOver() {\n    if (this.props.solved || this.state.dragging) return;\n    this.setState({\n      color: this.state.hoverColor\n    });\n  }\n  handleMouseOut() {\n    if (this.props.solved || this.state.dragging) return;\n    this.setState({\n      color: this.props.color\n    });\n  }\n  handleDragStart() {\n    this.setState({\n      dragging: true,\n      color: this.state.dragColor\n    });\n    this.props.onDragStart();\n  }\n  handleDragStop() {\n    this.setState({\n      dragging: false,\n      color: this.props.color\n    });\n    this.props.onDragStop();\n  }\n}\n","import React, { Ref } from \"react\";\nexport class PuzzleGuide extends React.Component<{\n  paths: string[];\n}> {\n  public ref: Ref<SVGGElement>;\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n  }\n  render() {\n    const pathEls = this.props.paths.map((path, index) => {\n      return (\n        <path\n          d={path}\n          stroke=\"{this.props.color}\"\n          strokeWidth={0.5}\n          fill=\"#e3e3e3\"\n          key={index}\n        />\n      );\n    });\n    return <g ref={this.ref}>{pathEls}</g>;\n  }\n  getBbox(): ClientRect | null {\n    const ref = this.ref;\n    if (typeof ref === \"object\" && ref && ref.current) {\n      return ref.current.getBoundingClientRect();\n    }\n  }\n}\n","import React, { Ref } from \"react\";\nimport chroma from \"chroma-js\";\nimport { PuzzlePiece } from \"./PuzzlePiece\";\nimport { PuzzleGuide } from \"./PuzzleGuide\";\nexport class Puzzle extends React.Component<\n  {\n    pathSets: string[][];\n  },\n  {\n    pieces: {\n      key: string;\n      paths: string[];\n      color: string;\n    }[];\n    solved: boolean;\n    dragScale: number; // number of pixels per svg unit\n    tolerance: number;\n  }\n> {\n  private ref: Ref<SVGSVGElement>;\n  private guideRefs: Ref<PuzzleGuide>[];\n  private pieceRefs: Ref<PuzzlePiece>[];\n  private resizeHandler?: (...args: any[]) => any;\n  constructor(props) {\n    super(props);\n    const colorScale = chroma\n      .scale(\"RdYlBu\")\n      .domain([0, props.pathSets.length], props.pathSets.length, \"quantiles\");\n    this.state = {\n      pieces: props.pathSets.map((paths, index) => ({\n        key: index,\n        paths,\n        color: colorScale(index / paths.length).hex()\n      })),\n      solved: false,\n      dragScale: 1,\n      tolerance: 30\n    };\n    this.ref = React.createRef();\n    this.guideRefs = this.state.pieces.map(() => React.createRef());\n    this.pieceRefs = this.state.pieces.map(() => React.createRef());\n  }\n  render() {\n    const pieces = this.state.pieces.map((piece, index) => (\n      <PuzzlePiece\n        paths={piece.paths}\n        key={piece.key}\n        color={piece.color}\n        onDragStart={() => this.handleDrag(index)}\n        onDragStop={() => this.handleDragStop()}\n        solved={this.state.solved}\n        dragScale={this.state.dragScale}\n        ref={this.pieceRefs[index]}\n      />\n    ));\n    const guides = this.state.pieces.map((piece, index) => (\n      <PuzzleGuide\n        paths={piece.paths}\n        ref={this.guideRefs[index]}\n        key={index}\n      />\n    ));\n    return (\n      <div className=\"Puzzle\">\n        <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 1000 1000\" ref={this.ref}>\n          {guides}\n          {pieces}\n        </svg>\n      </div>\n    );\n  }\n  componentDidMount() {\n    this.refreshDragScale();\n    this.resizeHandler = this.refreshDragScale.bind(this);\n    window.addEventListener(\"resize\", this.resizeHandler);\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.resizeHandler);\n  }\n  refreshDragScale() {\n    if (typeof this.ref === \"object\") {\n      const { width, height } = this.ref.current.getBoundingClientRect();\n      this.setState({\n        dragScale: Math.min(width, height) / 1000\n      });\n    }\n  }\n  movePieceToFront(index: number) {\n    if (index === this.state.pieces.length - 1) return;\n    this.setState({\n      pieces: [\n        ...this.state.pieces.slice(0, index),\n        ...this.state.pieces.slice(index + 1, this.state.pieces.length),\n        this.state.pieces[index]\n      ]\n    });\n  }\n  handleDrag(index: number) {\n    this.movePieceToFront(index);\n  }\n  isPieceSolved(index: number): boolean {\n    const guideRef = this.guideRefs[index];\n    const pieceRef = this.pieceRefs[index];\n    const { tolerance } = this.state;\n    if (!(typeof pieceRef === \"object\" && typeof guideRef === \"object\")) {\n      return false;\n    }\n    const pieceBbox = pieceRef.current.getBbox();\n    const guideBbox = guideRef.current.getBbox();\n    const solutionBounds = {\n      x1: guideBbox.left - tolerance,\n      x2: guideBbox.left + tolerance,\n      y1: guideBbox.top - tolerance,\n      y2: guideBbox.top + tolerance\n    };\n    const { left: x, top: y } = pieceBbox;\n    const out =\n      x > solutionBounds.x1 &&\n      x < solutionBounds.x2 &&\n      y > solutionBounds.y1 &&\n      y < solutionBounds.y2;\n    return out;\n  }\n  isAllSolved() {\n    return this.state.pieces.every((piece, index) => this.isPieceSolved(index));\n  }\n  handleDragStop() {\n    if (this.isAllSolved()) {\n      this.setState({\n        solved: true\n      });\n      window.alert(\"solved!\");\n    }\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport districts from \"../src/districts/al.json\";\nimport { Puzzle } from \"./Puzzle\";\n\nfunction getDistricts(): DistrictData[] {\n  return Object.entries(districts).map(([key, paths]) => ({ key, paths }));\n}\n\ntype DistrictData = { paths: string[]; key: string };\n\nclass App extends React.Component<\n  {},\n  {\n    districts: DistrictData[];\n  }\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      districts: getDistricts()\n    };\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Puzzle\n          pathSets={this.state.districts.map(district => district.paths)}\n        />\n      </div>\n    );\n  }\n  componentDidMount() {\n    document.addEventListener(\"touchstart\", e => e.preventDefault());\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["utils.ts","EndSlide.tsx","PuzzlePiece.tsx","PuzzleGuide.tsx","Puzzle.tsx","StartSlide.tsx","Timer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["parseMilliseconds","milliseconds","minutes","Math","floor","round","formatTimeVerbose","seconds","parts","push","join","EndSlide","title","subtitle","shareText","onRestart","shareUrl","params","parse","window","location","search","decodeURIComponent","href","getShareUrl","className","onClick","FacebookShareButton","url","quote","TwitterShareButton","EmailShareButton","PuzzlePiece","props","hoverColor","dragColor","state","color","dragging","pathEls","this","paths","map","path","index","d","fill","key","cursor","locked","scale","dragScale","onStart","handleDragStart","bind","onStop","handleDragStop","disabled","position","x","y","classnames","setState","onDragStart","e","draggableData","onDragStop","React","PureComponent","PuzzleGuide","ref","createRef","current","getBoundingClientRect","Component","Puzzle","resizeHandler","colorScale","chroma","domain","pieces","length","piece","originalPosition","transform","guideRef","pieceRef","tolerance","handleResize","stage","guides","bboxGuide","devMode","viewBox","width","height","innerWidth","innerHeight","prevProps","refreshDragScale","addEventListener","removeEventListener","forceUpdate","svgBbox","pixelsPerCoord","slice","forEach","isPieceSolved","every","movePieceToFront","isAllSolved","onSolved","logPositions","positions","reduce","prev","curr","toFixed","console","log","JSON","stringify","StartSlide","Timer","time","minutesStr","secondsStr","formatTime","App","interval","configuration","minX","minY","Object","entries","transforms","parseFloat","startTime","Date","duration","handleSolved","handleStart","handleRestart","handleTouchStart","document","setInterval","incrementTime","clearInterval","date","getTime","preventDefault","stopPropagation","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7ba2a5f7.chunk.js","sourcesContent":["import { parse } from \"query-string\";\nimport configuration from \"../src/districts/la.json\";\nimport { PuzzleConfiguration } from \"./types\";\n\nfunction parseMilliseconds(milliseconds: number): [number, number] {\n  const minutes = Math.floor(milliseconds / (1000 * 60));\n  const seconds = Math.round((milliseconds - minutes * 60 * 1000) / 1000);\n  return [minutes, seconds];\n}\n\nexport function formatTimeVerbose(milliseconds: number): string {\n  const [minutes, seconds] = parseMilliseconds(milliseconds);\n  const parts = [];\n  if (minutes === 1) {\n    parts.push(\"1 minute\");\n  } else if (minutes > 1) {\n    parts.push(`${minutes || 0} minutes`);\n  }\n  if (seconds === 1) {\n    parts.push(\"1 second\");\n  } else if (seconds > 1) {\n    parts.push(`${seconds || 0} seconds`);\n  }\n  return parts.join(\", \");\n}\n\nexport function formatTime(milliseconds: number): string {\n  const [minutes, seconds] = parseMilliseconds(milliseconds);\n  const minutesStr = minutes >= 10 ? `${minutes}` : `0${minutes}`;\n  const secondsStr = seconds >= 10 ? `${seconds}` : `0${seconds}`;\n  return `${minutesStr}:${secondsStr}`;\n}\n\nexport function getShareUrl(): string {\n  const params = parse(window.location.search);\n  return typeof params.shareUrl === \"string\"\n    ? decodeURIComponent(params.shareUrl)\n    : window.location.href;\n}\n\nexport function getData(): PuzzleConfiguration {\n  return {\n    viewBox: [\n      configuration.viewBox.minX,\n      configuration.viewBox.minY,\n      configuration.viewBox.width,\n      configuration.viewBox.height\n    ],\n    pieces: Object.entries(configuration.paths).map(([key, paths]) => {\n      const [x, y] = configuration.transforms[key] || [\"0\", \"0\"];\n      return {\n        key,\n        paths,\n        transform: [parseFloat(x), parseFloat(y)]\n      };\n    }),\n    title: configuration.title\n  };\n}\n\nexport function millisecondsSince(date: Date): number {\n  return Math.round(new Date().getTime() - date.getTime());\n}\n","import React from \"react\";\nimport { getShareUrl } from \"./utils\";\nimport {\n  FacebookShareButton,\n  TwitterShareButton,\n  EmailShareButton\n} from \"react-share\";\n\nexport const EndSlide: React.FunctionComponent<{\n  title: string;\n  subtitle: string;\n  shareText: string;\n  onRestart: () => any;\n}> = ({ title, subtitle, shareText, onRestart }) => {\n  const shareUrl = getShareUrl();\n  return (\n    <div className=\"slide\">\n      <div>\n        <h2>{title}</h2>\n        <p>{subtitle}</p>\n        <button className=\"btn-restart\" onClick={onRestart}>\n          Restart\n        </button>\n        <div className=\"share-btns\">\n          <FacebookShareButton\n            className=\"btn-share\"\n            url={shareUrl}\n            quote={shareText}\n          >\n            Share on Facebook\n          </FacebookShareButton>\n          <TwitterShareButton className=\"btn-share\" url={shareUrl}>\n            Tweet\n          </TwitterShareButton>\n          <EmailShareButton className=\"btn-share\" url={shareUrl}>\n            Email\n          </EmailShareButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport Draggable, { DraggableData } from \"react-draggable\";\nimport classnames from \"classnames\";\n\nexport class PuzzlePiece extends React.PureComponent<\n  {\n    paths: string[];\n    onDragStart: (index: number) => any;\n    onDragStop: (index: number, DraggableData) => any;\n    color: string;\n    locked: boolean;\n    dragScale: number;\n    position: [number, number];\n    index: number;\n  },\n  {\n    color: string;\n    dragging: boolean;\n  }\n> {\n  hoverColor: string;\n  dragColor: string;\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: this.props.color,\n      dragging: false\n    };\n    this.hoverColor = \"rgb(100%, 100%, 44.1%)\";\n    this.dragColor = \"yellow\";\n  }\n  render() {\n    const pathEls = this.props.paths.map((path, index) => {\n      return (\n        <path\n          d={path}\n          className=\"puzzle-piece-path\"\n          fill={this.state.color}\n          key={index}\n          cursor={this.props.locked ? \"normal\" : \"move\"}\n        />\n      );\n    });\n    return (\n      <Draggable\n        scale={this.props.dragScale}\n        onStart={this.handleDragStart.bind(this)}\n        onStop={this.handleDragStop.bind(this)}\n        disabled={this.props.locked}\n        position={{ x: this.props.position[0], y: this.props.position[1] }}\n      >\n        <g\n          className={classnames({\n            \"puzzle-piece-group\": true,\n            dragging: this.state.dragging\n          })}\n        >\n          {pathEls}\n        </g>\n      </Draggable>\n    );\n  }\n  handleDragStart() {\n    this.setState({\n      dragging: true\n    });\n    this.props.onDragStart(this.props.index);\n  }\n  handleDragStop(e: MouseEvent, draggableData: DraggableData) {\n    this.setState({\n      dragging: false\n    });\n    this.props.onDragStop(this.props.index, draggableData);\n  }\n}\n","import React, { Ref } from \"react\";\nexport class PuzzleGuide extends React.Component<{\n  paths: string[];\n}> {\n  public ref: Ref<SVGGElement>;\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n  }\n  render() {\n    const pathEls = this.props.paths.map((path, index) => {\n      return <path className=\"puzzle-guide-path\" d={path} key={index} />;\n    });\n    return <g ref={this.ref}>{pathEls}</g>;\n  }\n  getBbox(): ClientRect | null {\n    const ref = this.ref;\n    if (typeof ref === \"object\" && ref && ref.current) {\n      return ref.current.getBoundingClientRect();\n    }\n  }\n}\n","import React, { Ref } from \"react\";\nimport chroma from \"chroma-js\";\nimport { PuzzlePiece } from \"./PuzzlePiece\";\nimport { PuzzleGuide } from \"./PuzzleGuide\";\nimport { Piece } from \"./types\";\nimport { DraggableData } from \"react-draggable\";\n\nexport class Puzzle extends React.PureComponent<\n  {\n    pieces: Piece[];\n    stage: \"initial\" | \"editing\" | \"end\";\n    viewBox: [number, number, number, number];\n    devMode?: boolean;\n    onSolved?: () => any;\n  },\n  {\n    pieces: {\n      key: string;\n      paths: string[];\n      color: string;\n      guideRef: Ref<PuzzleGuide>;\n      pieceRef: Ref<PuzzlePiece>;\n      position: [number, number];\n      originalPosition: [number, number];\n    }[];\n    dragScale: number; // number of pixels per svg unit\n    tolerance: number;\n  }\n> {\n  private ref: Ref<SVGSVGElement>;\n  private resizeHandler?: (...args: any[]) => any;\n  constructor(props) {\n    super(props);\n    const colorScale = chroma\n      .scale(\"Spectral\")\n      .domain([0, props.pieces.length], props.pieces.length);\n\n    this.state = {\n      pieces: props.pieces.map((piece, index) => ({\n        key: piece.key,\n        paths: piece.paths,\n        originalPosition: piece.transform,\n        position: piece.transform,\n        color: colorScale(index),\n        guideRef: React.createRef(),\n        pieceRef: React.createRef()\n      })),\n      dragScale: 1,\n      tolerance: 30\n    };\n    this.ref = React.createRef();\n    this.handleDragStart = this.handleDragStart.bind(this);\n    this.handleDragStop = this.handleDragStop.bind(this);\n    this.resizeHandler = this.handleResize.bind(this);\n  }\n  render() {\n    const pieces = this.state.pieces.map((piece, index) => (\n      <PuzzlePiece\n        index={index}\n        paths={piece.paths}\n        key={piece.key}\n        color={piece.color}\n        onDragStart={this.handleDragStart}\n        onDragStop={this.handleDragStop}\n        dragScale={this.state.dragScale}\n        ref={piece.pieceRef}\n        locked={this.props.stage === \"end\"}\n        position={piece.position}\n      />\n    ));\n    const guides = this.state.pieces.map((piece, index) => (\n      <PuzzleGuide paths={piece.paths} ref={piece.guideRef} key={index} />\n    ));\n    const bboxGuide = this.props.devMode ? (\n      <rect\n        x={this.props.viewBox[0]}\n        y={this.props.viewBox[1]}\n        width={this.props.viewBox[2]}\n        height={this.props.viewBox[3]}\n      ></rect>\n    ) : null;\n    return (\n      <div className=\"Puzzle\">\n        <svg\n          width={window.innerWidth}\n          height={window.innerHeight}\n          viewBox={this.props.viewBox.join(\" \")}\n          ref={this.ref}\n        >\n          {bboxGuide}\n          {guides}\n          {pieces}\n        </svg>\n      </div>\n    );\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.stage !== this.props.stage) {\n      switch (this.props.stage) {\n        case \"editing\":\n        case \"initial\":\n          this.setState({\n            pieces: this.state.pieces.map(piece => {\n              piece.position = piece.originalPosition;\n              return piece;\n            })\n          });\n          break;\n        case \"end\":\n          this.setState({\n            pieces: this.state.pieces.map(piece => {\n              piece.position = [0, 0];\n              return piece;\n            })\n          });\n          break;\n      }\n    }\n  }\n  componentDidMount() {\n    this.refreshDragScale();\n    window.addEventListener(\"resize\", this.resizeHandler);\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.resizeHandler);\n  }\n  handleResize() {\n    this.forceUpdate(); // re-render first b/c to compute drag scale we need to render new dimensions\n    this.refreshDragScale();\n  }\n  refreshDragScale() {\n    if (typeof this.ref !== \"object\") return;\n    const { viewBox } = this.props;\n    const svgBbox = this.ref.current.getBoundingClientRect();\n    const viewPortAspectRatio = svgBbox.width / svgBbox.height;\n    const viewBoxAspectRatio = viewBox[2] / viewBox[3];\n    const heightLimited = viewPortAspectRatio > viewBoxAspectRatio;\n    const pixelsPerCoord = heightLimited\n      ? svgBbox.height / this.props.viewBox[3]\n      : svgBbox.width / this.props.viewBox[2];\n    this.setState({\n      dragScale: pixelsPerCoord\n    });\n  }\n  movePieceToFront(index: number) {\n    if (index === this.state.pieces.length - 1) return;\n    this.setState({\n      pieces: [\n        ...this.state.pieces.slice(0, index),\n        ...this.state.pieces.slice(index + 1, this.state.pieces.length),\n        this.state.pieces[index]\n      ]\n    });\n  }\n  isPieceSolved(index: number): boolean {\n    const {\n      position: [x, y]\n    } = this.state.pieces[index];\n    const { tolerance } = this.state;\n    return x > -tolerance && x < tolerance && y > -tolerance && y < tolerance;\n  }\n  isAllSolved() {\n    this.state.pieces.forEach((piece, index) => this.isPieceSolved(index));\n    return this.state.pieces.every((piece, index) => this.isPieceSolved(index));\n  }\n  handleDragStart(index: number) {\n    this.movePieceToFront(index);\n  }\n  handleDragStop(index: number, e: DraggableData) {\n    const piece = this.state.pieces[index];\n    piece.position = [e.x, e.y];\n\n    this.setState({\n      pieces: [...this.state.pieces]\n    });\n\n    if (this.isAllSolved()) {\n      this.props.onSolved();\n    }\n    this.logPositions();\n  }\n  // for development\n  logPositions() {\n    if (!this.props.devMode) return;\n    const positions = this.state.pieces.reduce((prev, curr) => {\n      const position = curr.position;\n      if (position) {\n        const [x, y] = position;\n        prev[curr.key] = [x.toFixed(1), y.toFixed(1)];\n      }\n      return prev;\n    }, {});\n    console.log(JSON.stringify(positions));\n  }\n}\n","import React from \"react\";\n\nexport const StartSlide: React.FunctionComponent<{\n  title: string;\n  onStart: () => any;\n}> = props => {\n  return (\n    <div className=\"slide\">\n      <div>\n        <h2>{props.title}</h2>\n        <button className=\"btn-start\" onClick={props.onStart}>\n          Start\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { formatTime } from \"./utils\";\n\nexport const Timer: React.FunctionComponent<{ time: number }> = ({ time }) => {\n  return <div className=\"timer\">{formatTime(time)}</div>;\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { EndSlide } from \"./EndSlide\";\nimport { Puzzle } from \"./Puzzle\";\nimport { StartSlide } from \"./StartSlide\";\nimport { Timer } from \"./Timer\";\nimport { Piece } from \"./types\";\nimport { formatTimeVerbose, getData, millisecondsSince } from \"./utils\";\n\nclass App extends React.Component<\n  {},\n  {\n    stage: \"start\" | \"puzzle\" | \"end\";\n    startTime: Date;\n    pieces: Piece[];\n    duration: number;\n    viewBox: [number, number, number, number];\n    title: string;\n  }\n> {\n  public interval: NodeJS.Timeout;\n  constructor(props) {\n    super(props);\n    const { pieces, viewBox, title } = getData();\n    this.state = {\n      pieces,\n      viewBox,\n      title,\n      startTime: new Date(),\n      duration: 0,\n      stage: \"start\"\n    };\n    this.handleSolved = this.handleSolved.bind(this);\n    this.handleStart = this.handleStart.bind(this);\n    this.handleRestart = this.handleRestart.bind(this);\n    this.handleTouchStart = this.handleTouchStart.bind(this);\n  }\n  render() {\n    switch (this.state.stage) {\n      case \"start\":\n        return (\n          <div className=\"App\">\n            <StartSlide title={this.state.title} onStart={this.handleStart} />\n            <Puzzle\n              stage=\"initial\"\n              pieces={this.state.pieces}\n              viewBox={this.state.viewBox}\n            />\n          </div>\n        );\n      case \"puzzle\":\n        return (\n          <div className=\"App\">\n            <Timer time={this.state.duration} />\n            <Puzzle\n              stage=\"editing\"\n              onSolved={this.handleSolved}\n              pieces={this.state.pieces}\n              viewBox={this.state.viewBox}\n            />\n          </div>\n        );\n      case \"end\":\n        return (\n          <div className=\"App\">\n            <EndSlide\n              title=\"Solved!\"\n              subtitle={`You solved the puzzle in ${formatTimeVerbose(\n                this.state.duration\n              )}.`}\n              shareText={`I solved the puzzle in ${formatTimeVerbose(\n                this.state.duration\n              )}`}\n              onRestart={this.handleRestart}\n            />\n            <Puzzle\n              stage=\"end\"\n              pieces={this.state.pieces}\n              viewBox={this.state.viewBox}\n            />\n          </div>\n        );\n    }\n  }\n  componentDidMount() {\n    document.addEventListener(\"touchstart\", this.handleTouchStart);\n    this.interval = setInterval(() => this.incrementTime(), 1000);\n  }\n  componentWillUnmount() {\n    document.removeEventListener(\"touchstart\", this.handleTouchStart);\n    clearInterval(this.interval);\n  }\n  incrementTime() {\n    if (this.state.stage !== \"puzzle\") return;\n    this.setState({\n      duration: Math.round(millisecondsSince(this.state.startTime))\n    });\n  }\n  handleStart() {\n    this.setState({ stage: \"puzzle\" });\n  }\n  handleSolved() {\n    this.setState({\n      stage: \"end\"\n    });\n  }\n  handleRestart() {\n    this.setState({\n      startTime: new Date(),\n      stage: \"puzzle\",\n      duration: 0\n    });\n  }\n  handleTouchStart(e: TouchEvent) {\n    e.preventDefault();\n    e.stopPropagation();\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
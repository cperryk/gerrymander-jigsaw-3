{"version":3,"sources":["PuzzlePiece.tsx","PuzzleGuide.tsx","Puzzle.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PuzzlePiece","props","myRef","originalPosition","solutionBounds","state","translate","dragColor","hoverColor","color","dragging","React","createRef","pathEls","this","paths","map","path","index","d","stroke","strokeWidth","fill","key","strokeLinecap","strokeMiterlimit","cursor","solved","scale","onStart","handleDragStart","bind","onStop","handleDragStop","disabled","onMouseOver","handleMouseOver","onMouseOut","handleMouseOut","ref","current","rect","getBoundingClientRect","x","left","window","scrollX","y","top","scrollY","getPosition","x1","tolerance","x2","y1","y2","setAttribute","setState","onDragStart","onDragStop","isSolved","PureComponent","PuzzleGuide","Component","Puzzle","solutions","colorScale","chroma","domain","pathSets","length","pieces","hex","reduce","prev","curr","piece","handleDrag","className","width","height","viewBox","concat","slice","movePieceToFront","console","log","isAllSolved","alert","Object","values","every","val","App","districts","entries","district","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2714f2af.chunk.js","sourcesContent":["import React, { Ref } from \"react\";\nimport Draggable from \"react-draggable\";\nexport class PuzzlePiece extends React.PureComponent<\n  {\n    paths: string[];\n    onDragStart: () => any;\n    onDragStop: (isSolved: boolean) => any;\n    color: string;\n    tolerance: number;\n    solved: boolean;\n  },\n  {\n    translate: [number, number];\n    color: string;\n    hoverColor: string;\n    dragColor: string;\n    dragging: boolean;\n  }\n> {\n  private myRef: Ref<SVGGElement>;\n  private originalPosition: {\n    x: number;\n    y: number;\n  };\n  private solutionBounds: {\n    x1: number;\n    x2: number;\n    y1: number;\n    y2: number;\n  };\n  constructor(props) {\n    super(props);\n    this.state = {\n      translate: [50, 0],\n      dragColor: \"yellow\",\n      hoverColor: \"rgb(100%, 100%, 44.1%)\",\n      color: this.props.color,\n      dragging: false\n    };\n    this.myRef = React.createRef();\n  }\n  render() {\n    const pathEls = this.props.paths.map((path, index) => {\n      return (\n        <path\n          d={path}\n          stroke=\"gray\"\n          strokeWidth={0.2}\n          fill={this.state.color}\n          key={index}\n          strokeLinecap=\"square\"\n          strokeMiterlimit={4}\n          cursor={this.props.solved ? \"normal\" : \"move\"}\n        />\n      );\n    });\n    return (\n      <Draggable\n        scale={1}\n        onStart={this.handleDragStart.bind(this)}\n        onStop={this.handleDragStop.bind(this)}\n        disabled={this.props.solved}\n      >\n        <g\n          onMouseOver={this.handleMouseOver.bind(this)}\n          onMouseOut={this.handleMouseOut.bind(this)}\n          ref={this.myRef}\n        >\n          {pathEls}\n        </g>\n      </Draggable>\n    );\n  }\n  getPosition(): {\n    x: number;\n    y: number;\n  } | null {\n    if (typeof this.myRef === \"object\" && this.myRef && this.myRef.current) {\n      const rect = this.myRef.current.getBoundingClientRect();\n      return { x: rect.left - window.scrollX, y: rect.top - window.scrollY };\n    }\n  }\n  componentDidMount() {\n    if (typeof this.myRef === \"object\" && this.myRef && this.myRef.current) {\n      this.originalPosition = this.getPosition();\n      this.solutionBounds = {\n        x1: this.originalPosition.x - this.props.tolerance,\n        x2: this.originalPosition.x + this.props.tolerance,\n        y1: this.originalPosition.y - this.props.tolerance,\n        y2: this.originalPosition.y + this.props.tolerance\n      };\n    }\n  }\n  componentDidUpdate() {\n    if (this.props.solved && typeof this.myRef === \"object\") {\n      this.myRef.current.setAttribute(\"transform\", \"\");\n    }\n  }\n  handleMouseOver() {\n    if (this.props.solved || this.state.dragging) return;\n    this.setState({\n      color: this.state.hoverColor\n    });\n  }\n  handleMouseOut() {\n    if (this.props.solved || this.state.dragging) return;\n    this.setState({\n      color: this.props.color\n    });\n  }\n  handleDragStart() {\n    this.setState({\n      dragging: true,\n      color: this.state.dragColor\n    });\n    this.props.onDragStart();\n  }\n  handleDragStop() {\n    this.setState({\n      dragging: false,\n      color: this.props.color\n    });\n    this.props.onDragStop(this.isSolved());\n  }\n  isSolved(): boolean {\n    const { x, y } = this.getPosition();\n    return (\n      x > this.solutionBounds.x1 &&\n      x < this.solutionBounds.x2 &&\n      y > this.solutionBounds.y1 &&\n      y < this.solutionBounds.y2\n    );\n  }\n}\n","import React from \"react\";\nexport class PuzzleGuide extends React.Component<{\n  paths: string[];\n  color: string;\n}> {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    const pathEls = this.props.paths.map((path, index) => {\n      return (\n        <path\n          d={path}\n          stroke=\"{this.props.color}\"\n          strokeWidth={0.5}\n          fill={this.props.color}\n          key={index}\n        />\n      );\n    });\n    return <g>{pathEls}</g>;\n  }\n}\n","import React from \"react\";\nimport chroma from \"chroma-js\";\nimport { PuzzlePiece } from \"./PuzzlePiece\";\nimport { PuzzleGuide } from \"./PuzzleGuide\";\nexport class Puzzle extends React.Component<\n  {\n    pathSets: string[][];\n  },\n  {\n    pieces: {\n      key: string;\n      paths: string[];\n      color: string;\n    }[];\n    solved: boolean;\n  }\n> {\n  solutions: {\n    [key: string]: boolean;\n  } = {};\n  constructor(props) {\n    super(props);\n    const colorScale = chroma\n      .scale(\"RdYlBu\")\n      .domain([0, props.pathSets.length], props.pathSets.length, \"quantiles\");\n    this.state = {\n      pieces: props.pathSets.map((paths, index) => ({\n        key: index,\n        paths,\n        color: colorScale(index / paths.length).hex()\n      })),\n      solved: false\n    };\n    this.solutions = this.props.pathSets.reduce((prev, curr, index) => {\n      prev[index] = false;\n      return prev;\n    }, {});\n  }\n  render() {\n    const pieces = this.state.pieces.map((piece, index) => (\n      <PuzzlePiece\n        paths={piece.paths}\n        key={piece.key}\n        color={piece.color}\n        tolerance={30}\n        onDragStart={() => this.handleDrag(index)}\n        onDragStop={isSolved => this.handleDragStop(piece.key, isSolved)}\n        solved={this.state.solved}\n      />\n    ));\n    return (\n      <div className=\"Puzzle\">\n        <svg width={1000} height={1000} viewBox=\"0 0 1000 1000\">\n          <PuzzleGuide\n            color=\"#e3e3e3\"\n            paths={[].concat(this.state.pieces.map(piece => piece.paths))}\n          />\n          {pieces}\n        </svg>\n      </div>\n    );\n  }\n  movePieceToFront(index: number) {\n    if (index === this.state.pieces.length - 1) return;\n    this.setState({\n      pieces: [\n        ...this.state.pieces.slice(0, index),\n        ...this.state.pieces.slice(index + 1, this.state.pieces.length),\n        this.state.pieces[index]\n      ]\n    });\n  }\n  handleDrag(index: number) {\n    this.movePieceToFront(index);\n  }\n  handleDragStop(key: string, isSolved: boolean) {\n    this.solutions[key] = isSolved;\n    console.log(this.solutions);\n    if (this.isAllSolved()) {\n      window.alert(\"solved!\");\n      this.setState({\n        solved: true\n      });\n    }\n  }\n  isAllSolved(): boolean {\n    return Object.values(this.solutions).every(val => val === true);\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport districts from \"../src/districts/al.json\";\nimport { Puzzle } from \"./Puzzle\";\n\nfunction getDistricts(): DistrictData[] {\n  return Object.entries(districts).map(([key, paths]) => ({ key, paths }));\n}\n\ntype DistrictData = { paths: string[]; key: string };\n\nclass App extends React.Component<\n  {},\n  {\n    districts: DistrictData[];\n  }\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      districts: getDistricts()\n    };\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Puzzle\n          pathSets={this.state.districts.map(district => district.paths)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}